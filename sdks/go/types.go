// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "go-mod-path/generated/go/core"
	time "time"
)

type GpuType string

const (
	GpuTypeRtxA400016Gb    GpuType = "RTX_A4000_16GB"
	GpuTypeRtxA600048Gb    GpuType = "RTX_A6000_48GB"
	GpuTypeRtxA500024Gb    GpuType = "RTX_A5000_24GB"
	GpuTypeTeslaV10016Gb   GpuType = "TESLA_V100_16GB"
	GpuTypeA100Pcie80Gb    GpuType = "A100_PCIE_80GB"
	GpuTypeA4048Gb         GpuType = "A40_48GB"
	GpuTypeA3024Gb         GpuType = "A30_24GB"
	GpuTypeA100Sxm480Gb    GpuType = "A100_SXM4_80GB"
	GpuTypeA10Pcie24Gb     GpuType = "A10_PCIE_24GB"
	GpuTypeA100Sxm440Gb    GpuType = "A100_SXM4_40GB"
	GpuTypeA100Pcie40Gb    GpuType = "A100_PCIE_40GB"
	GpuTypeA100Nvlink80Gb  GpuType = "A100_NVLINK_80GB"
	GpuTypeA100Nvlink40Gb  GpuType = "A100_NVLINK_40GB"
	GpuTypeH100Sxm580Gb    GpuType = "H100_SXM5_80GB"
	GpuTypeH100Sxm480Gb    GpuType = "H100_SXM4_80GB"
	GpuTypeA1024Gb         GpuType = "A10_24GB"
	GpuTypeRtx600024Gb     GpuType = "RTX_6000_24GB"
	GpuTypeH100Pcie80Gb    GpuType = "H100_PCIE_80GB"
	GpuTypeH100Nvlink80Gb  GpuType = "H100_NVLINK_80GB"
	GpuTypeRtxA6000Ada48Gb GpuType = "RTX_A6000_ADA_48GB"
	GpuTypeL4048Gb         GpuType = "L40_48GB"
	GpuTypeL424Gb          GpuType = "L4_24GB"
	GpuTypeT416Gb          GpuType = "T4_16GB"
)

func NewGpuTypeFromString(s string) (GpuType, error) {
	switch s {
	case "RTX_A4000_16GB":
		return GpuTypeRtxA400016Gb, nil
	case "RTX_A6000_48GB":
		return GpuTypeRtxA600048Gb, nil
	case "RTX_A5000_24GB":
		return GpuTypeRtxA500024Gb, nil
	case "TESLA_V100_16GB":
		return GpuTypeTeslaV10016Gb, nil
	case "A100_PCIE_80GB":
		return GpuTypeA100Pcie80Gb, nil
	case "A40_48GB":
		return GpuTypeA4048Gb, nil
	case "A30_24GB":
		return GpuTypeA3024Gb, nil
	case "A100_SXM4_80GB":
		return GpuTypeA100Sxm480Gb, nil
	case "A10_PCIE_24GB":
		return GpuTypeA10Pcie24Gb, nil
	case "A100_SXM4_40GB":
		return GpuTypeA100Sxm440Gb, nil
	case "A100_PCIE_40GB":
		return GpuTypeA100Pcie40Gb, nil
	case "A100_NVLINK_80GB":
		return GpuTypeA100Nvlink80Gb, nil
	case "A100_NVLINK_40GB":
		return GpuTypeA100Nvlink40Gb, nil
	case "H100_SXM5_80GB":
		return GpuTypeH100Sxm580Gb, nil
	case "H100_SXM4_80GB":
		return GpuTypeH100Sxm480Gb, nil
	case "A10_24GB":
		return GpuTypeA1024Gb, nil
	case "RTX_6000_24GB":
		return GpuTypeRtx600024Gb, nil
	case "H100_PCIE_80GB":
		return GpuTypeH100Pcie80Gb, nil
	case "H100_NVLINK_80GB":
		return GpuTypeH100Nvlink80Gb, nil
	case "RTX_A6000_ADA_48GB":
		return GpuTypeRtxA6000Ada48Gb, nil
	case "L40_48GB":
		return GpuTypeL4048Gb, nil
	case "L4_24GB":
		return GpuTypeL424Gb, nil
	case "T4_16GB":
		return GpuTypeT416Gb, nil
	}
	var t GpuType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GpuType) Ptr() *GpuType {
	return &g
}

type HttpValidationError struct {
	Detail []*ValidationError `json:"detail,omitempty" url:"detail,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HttpValidationError) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HttpValidationError) UnmarshalJSON(data []byte) error {
	type unmarshaler HttpValidationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HttpValidationError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HttpValidationError) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HealthCheckOutSchema struct {
	Status *string `json:"status,omitempty" url:"status,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HealthCheckOutSchema) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HealthCheckOutSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler HealthCheckOutSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HealthCheckOutSchema(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HealthCheckOutSchema) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type Message struct {
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *Message) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Message) UnmarshalJSON(data []byte) error {
	type unmarshaler Message
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = Message(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *Message) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type Region string

const (
	RegionNorway        Region = "NORWAY"
	RegionFinland       Region = "FINLAND"
	RegionCanada        Region = "CANADA"
	RegionSweden        Region = "SWEDEN"
	RegionNetherlands   Region = "NETHERLANDS"
	RegionTexasUsa      Region = "TEXAS_USA"
	RegionCaliforniaUsa Region = "CALIFORNIA_USA"
	RegionArizonaUsa    Region = "ARIZONA_USA"
	RegionVirginiaUsa   Region = "VIRGINIA_USA"
	RegionIllinoisUsa   Region = "ILLINOIS_USA"
	RegionJapan         Region = "JAPAN"
	RegionUtahUsa       Region = "UTAH_USA"
	RegionWashingtonUsa Region = "WASHINGTON_USA"
	RegionGermany       Region = "GERMANY"
	RegionIndia         Region = "INDIA"
	RegionIsrael        Region = "ISRAEL"
	RegionLuxembourg    Region = "LUXEMBOURG"
)

func NewRegionFromString(s string) (Region, error) {
	switch s {
	case "NORWAY":
		return RegionNorway, nil
	case "FINLAND":
		return RegionFinland, nil
	case "CANADA":
		return RegionCanada, nil
	case "SWEDEN":
		return RegionSweden, nil
	case "NETHERLANDS":
		return RegionNetherlands, nil
	case "TEXAS_USA":
		return RegionTexasUsa, nil
	case "CALIFORNIA_USA":
		return RegionCaliforniaUsa, nil
	case "ARIZONA_USA":
		return RegionArizonaUsa, nil
	case "VIRGINIA_USA":
		return RegionVirginiaUsa, nil
	case "ILLINOIS_USA":
		return RegionIllinoisUsa, nil
	case "JAPAN":
		return RegionJapan, nil
	case "UTAH_USA":
		return RegionUtahUsa, nil
	case "WASHINGTON_USA":
		return RegionWashingtonUsa, nil
	case "GERMANY":
		return RegionGermany, nil
	case "INDIA":
		return RegionIndia, nil
	case "ISRAEL":
		return RegionIsrael, nil
	case "LUXEMBOURG":
		return RegionLuxembourg, nil
	}
	var t Region
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r Region) Ptr() *Region {
	return &r
}

type SupportedOperatingSystem string

const (
	SupportedOperatingSystemUbuntu2004LtsNvidia SupportedOperatingSystem = "ubuntu_20_04_lts_nvidia"
	SupportedOperatingSystemUbuntu2204LtsNvidia SupportedOperatingSystem = "ubuntu_22_04_lts_nvidia"
)

func NewSupportedOperatingSystemFromString(s string) (SupportedOperatingSystem, error) {
	switch s {
	case "ubuntu_20_04_lts_nvidia":
		return SupportedOperatingSystemUbuntu2004LtsNvidia, nil
	case "ubuntu_22_04_lts_nvidia":
		return SupportedOperatingSystemUbuntu2204LtsNvidia, nil
	}
	var t SupportedOperatingSystem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SupportedOperatingSystem) Ptr() *SupportedOperatingSystem {
	return &s
}

type UpdateUserCompanyDetailsRequest struct {
	CompanyName        *string `json:"company_name,omitempty" url:"company_name,omitempty"`
	CompanyVatNumber   *string `json:"company_vat_number,omitempty" url:"company_vat_number,omitempty"`
	CompanyAddress     *string `json:"company_address,omitempty" url:"company_address,omitempty"`
	CompanyTaxId       *string `json:"company_tax_id,omitempty" url:"company_tax_id,omitempty"`
	CompanyContactInfo *string `json:"company_contact_info,omitempty" url:"company_contact_info,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateUserCompanyDetailsRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateUserCompanyDetailsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateUserCompanyDetailsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateUserCompanyDetailsRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateUserCompanyDetailsRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type User struct {
	Id                       EntityId   `json:"id" url:"id"`
	FirstName                *string    `json:"first_name,omitempty" url:"first_name,omitempty"`
	LastName                 *string    `json:"last_name,omitempty" url:"last_name,omitempty"`
	Email                    string     `json:"email" url:"email"`
	StripeCustomerId         *string    `json:"stripe_customer_id,omitempty" url:"stripe_customer_id,omitempty"`
	WorkosUserId             string     `json:"workos_user_id" url:"workos_user_id"`
	WorkosOrganizationId     *string    `json:"workos_organization_id,omitempty" url:"workos_organization_id,omitempty"`
	IsBanned                 *bool      `json:"is_banned,omitempty" url:"is_banned,omitempty"`
	CreatedAt                *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	UpdatedAt                *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	AutoTopupEnabled         *bool      `json:"auto_topup_enabled,omitempty" url:"auto_topup_enabled,omitempty"`
	AutoTopupAmount          *int       `json:"auto_topup_amount,omitempty" url:"auto_topup_amount,omitempty"`
	AutoTopupMinimumBalance  *int       `json:"auto_topup_minimum_balance,omitempty" url:"auto_topup_minimum_balance,omitempty"`
	CompanyName              *string    `json:"company_name,omitempty" url:"company_name,omitempty"`
	CompanyVatNumber         *string    `json:"company_vat_number,omitempty" url:"company_vat_number,omitempty"`
	CompanyAddress           *string    `json:"company_address,omitempty" url:"company_address,omitempty"`
	CompanyTaxId             *string    `json:"company_tax_id,omitempty" url:"company_tax_id,omitempty"`
	CompanyContactInfo       *string    `json:"company_contact_info,omitempty" url:"company_contact_info,omitempty"`
	AutoTerminateOnDepletion *bool      `json:"auto_terminate_on_depletion,omitempty" url:"auto_terminate_on_depletion,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type embed User
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = User(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	u.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) MarshalJSON() ([]byte, error) {
	type embed User
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*u),
		CreatedAt: core.NewOptionalDateTime(u.CreatedAt),
		UpdatedAt: core.NewOptionalDateTime(u.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (u *User) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type ValidationError struct {
	Loc  []*ValidationErrorLocItem `json:"loc,omitempty" url:"loc,omitempty"`
	Msg  string                    `json:"msg" url:"msg"`
	Type string                    `json:"type" url:"type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *ValidationError) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValidationError) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidationError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidationError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidationError) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidationErrorLocItem struct {
	String  string
	Integer int
}

func NewValidationErrorLocItemFromString(value string) *ValidationErrorLocItem {
	return &ValidationErrorLocItem{String: value}
}

func NewValidationErrorLocItemFromInteger(value int) *ValidationErrorLocItem {
	return &ValidationErrorLocItem{Integer: value}
}

func (v *ValidationErrorLocItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		v.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v ValidationErrorLocItem) MarshalJSON() ([]byte, error) {
	if v.String != "" {
		return json.Marshal(v.String)
	}
	if v.Integer != 0 {
		return json.Marshal(v.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type ValidationErrorLocItemVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (v *ValidationErrorLocItem) Accept(visitor ValidationErrorLocItemVisitor) error {
	if v.String != "" {
		return visitor.VisitString(v.String)
	}
	if v.Integer != 0 {
		return visitor.VisitInteger(v.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

// The current hourly rate of the volume.
type VolumeInstanceResponseInputCostGbHr struct {
	Double float64
	String string
}

func NewVolumeInstanceResponseInputCostGbHrFromDouble(value float64) *VolumeInstanceResponseInputCostGbHr {
	return &VolumeInstanceResponseInputCostGbHr{Double: value}
}

func NewVolumeInstanceResponseInputCostGbHrFromString(value string) *VolumeInstanceResponseInputCostGbHr {
	return &VolumeInstanceResponseInputCostGbHr{String: value}
}

func (v *VolumeInstanceResponseInputCostGbHr) UnmarshalJSON(data []byte) error {
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		v.Double = valueDouble
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v VolumeInstanceResponseInputCostGbHr) MarshalJSON() ([]byte, error) {
	if v.Double != 0 {
		return json.Marshal(v.Double)
	}
	if v.String != "" {
		return json.Marshal(v.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type VolumeInstanceResponseInputCostGbHrVisitor interface {
	VisitDouble(float64) error
	VisitString(string) error
}

func (v *VolumeInstanceResponseInputCostGbHr) Accept(visitor VolumeInstanceResponseInputCostGbHrVisitor) error {
	if v.Double != 0 {
		return visitor.VisitDouble(v.Double)
	}
	if v.String != "" {
		return visitor.VisitString(v.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}
